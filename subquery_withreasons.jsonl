{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nProvide respondent count by age group (45-60) in Daman and Diu and Dadra and Nagar Haveli for DD_2025 round 2?\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- SELECT: The purpose of this clause is to select the age column from the demographic_section_capi table and count the number of respondents.\n- FROM: The FROM clause joins the demographic_section_capi, capi_fact, and survey_desc_dimension_capi tables based on the specified join logic.\n- WHERE: The WHERE clause filters the data based on the age group (45-60), election cycle (DD_2025), election round (2), and state abbreviation (DD).\n- GROUP BY: The GROUP BY clause groups the data by the age column to calculate the count for each age group.\n- ORDER BY: The ORDER BY clause sorts the results by the age column in ascending order.\n\nThe final query plan is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '45-60' AND sdd.state_abb = 'DD' AND sdd.election_cycle = 'DD_2025' AND sdd.election_round = '2' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '45-60' AND  sdd.state_abb = 'DD' AND sdd.election_cycle = 'DD_2025' AND sdd.election_round = '2' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nShow job type distribution by gender (Female) in Chandigarh for CH_2025_AE round 2.1?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: The query selects 'gender' and 'job_type' columns from the 'demographic_section_capi' table, and counts the number of rows using 'COUNT(*)'.\n- FROM: The query joins 'demographic_section_capi' with 'capi_fact' on 'capi_fk', and then joins the result with'survey_desc_dimension_capi' on'sd_dm_fk'.\n- WHERE: The query filters the results based on 'gender = Female','state_abb = CH', 'election_cycle = CH_2025_AE', and 'election_round = 2.1'.\n- GROUP BY: The query groups the results by 'gender' and 'job_type' to show the distribution of job types by gender.\n\nThe final SQL query is:\n```sql\nSELECT d.gender, d.job_type, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.gender = 'Female' AND sdd.state_abb = 'CH' AND sdd.election_cycle = 'CH_2025_AE' AND sdd.election_round = '2.1' \nGROUP BY d.gender, d.job_type;\n```<|eot_id|>", "output": "SELECT d.gender, d.job_type, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.gender = 'Female' AND  sdd.state_abb = 'CH' AND sdd.election_cycle = 'CH_2025_AE' AND sdd.election_round = '2.1' GROUP BY d.gender, d.job_type;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList respondent count by age group (18-25) in Uttar Pradesh for UP_2024_AE round 3?\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- SELECT: The query selects the `age` column from `demographic_section_capi` and counts the number of respondents using the `COUNT(*)` aggregation function.\n- FROM: The query joins three tables: `demographic_section_capi` (d), `capi_fact` (cf), and `survey_desc_dimension_capi` (sdd).\n- WHERE: The query filters the results based on the age group (18-25), state (Uttar Pradesh), election cycle (UP_2024_AE), and election round (3).\n- GROUP BY: The query groups the results by the `age` column to count the number of respondents in each age group.\n- ORDER BY: The query orders the results by the `age` column in ascending order.\n\nThe final SQL query is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '18-25' AND sdd.state_abb = 'UP' AND sdd.election_cycle = 'UP_2024_AE' AND sdd.election_round = '3' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '18-25' AND  sdd.state_abb = 'UP' AND sdd.election_cycle = 'UP_2024_AE' AND sdd.election_round = '3' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nShow respondent count by age group (25-30) in Chandigarh for CH_2022_AE round 1?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: This selects the age column from the demographic_section_capi table and counts the number of rows.\n- FROM: It joins the demographic_section_capi table with capi_fact on capi_fk and capi_pk, and then joins the result with survey_desc_dimension_capi on sd_dm_fk and sd_dm_pk.\n- WHERE: It filters the data based on the age group (25-30), state (Chandigarh), election cycle (CH_2022_AE), and election round (1).\n- GROUP BY: It groups the data by the age column to count the number of respondents in each age group.\n- ORDER BY: It orders the result by the age column in ascending order.\n\nThe final query plan is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '25-30' AND  sdd.state_abb = 'CH' AND sdd.election_cycle = 'CH_2022_AE' AND sdd.election_round = '1' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '25-30' AND  sdd.state_abb = 'CH' AND sdd.election_cycle = 'CH_2022_AE' AND sdd.election_round = '1' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nShow job type distribution by gender (Female) in Delhi for DL_2020 round 3?\n\nPlan:\nStep 4: Outline the Query Plan\n- SELECT: The query selects the 'gender', 'job_type', and counts the number of rows for each combination of 'gender' and 'job_type'.\n- FROM: The query joins three tables: 'demographic_section_capi' (d), 'capi_fact' (cf), and'survey_desc_dimension_capi' (sdd).\n- WHERE: The query filters the results based on the election cycle, election round, and gender.\n- GROUP BY: The query groups the results by 'gender' and 'job_type' to calculate the distribution of job types among females in Delhi for the DL_2020 round 3.\n\nThe final SQL query is:\n```sql\nSELECT d.gender, d.job_type, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.gender = 'Female' AND  sdd.state_abb = 'DL' AND sdd.election_cycle = 'DL_2020' AND sdd.election_round = '3' GROUP BY d.gender, d.job_type;\n```<|eot_id|>", "output": "SELECT d.gender, d.job_type, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.gender = 'Female' AND  sdd.state_abb = 'DL' AND sdd.election_cycle = 'DL_2020' AND sdd.election_round = '3' GROUP BY d.gender, d.job_type;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nProvide respondent count by age group (25-30) in Sikkim for SK_2020_AE round 2.1?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: The main query selects the `age` column from `demographic_section_capi` and counts the number of rows using `COUNT(*)`.\n- FROM: The query joins three tables: `demographic_section_capi` (d), `capi_fact` (cf), and `survey_desc_dimension_capi` (sdd).\n- WHERE: The query filters the data based on the age group (25-30), state (Sikkim), election cycle (SK_2020_AE), and election round (2.1).\n- GROUP BY: The query groups the results by the `age` column.\n- ORDER BY: The query orders the results by the `age` column.\n\nThe final query plan is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '25-30' AND sdd.state_abb = 'SK' AND sdd.election_cycle = 'SK_2020_AE' AND sdd.election_round = '2.1' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '25-30' AND  sdd.state_abb = 'SK' AND sdd.election_cycle = 'SK_2020_AE' AND sdd.election_round = '2.1' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status)\n\nQuestion:\nWhich party has the highest future vote preference in Nagaland in round NL_2019 of 1?\n\nPlan:\nStep 4: Outline the Query Plan\n- SELECT: Select the future_vote_pref column from ae_section_capi and count the number of occurrences for each party.\n- FROM: Join ae_section_capi with capi_fact on capi_fk = capi_pk, and join capi_fact with survey_desc_dimension_capi on sd_dm_fk = sd_dm_pk.\n- WHERE: Filter the results to include only rows where state_abb = 'NL', election_round = 'NL_2019', and election_cycle = '1'.\n- GROUP BY: Group the results by future_vote_pref to count the occurrences of each party.\n- ORDER BY: Order the results in descending order by the count of occurrences.\n- LIMIT: Return only the top row, which corresponds to the party with the highest future vote preference.\n\nThe final query plan would be:\n```sql\nSELECT asc2.future_vote_pref, COUNT(*) \nFROM ae_section_capi asc2 \nJOIN capi_fact cf ON asc2.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE sdd.state_abb = 'NL' AND sdd.election_round = 'NL_2019' AND sdd.election_cycle = '1' \nGROUP BY asc2.future_vote_pref \nORDER BY COUNT(*) DESC \nLIMIT 1;\n```<|eot_id|>", "output": "SELECT asc2.future_vote_pref, COUNT(*) FROM ae_section_capi asc2 JOIN capi_fact cf ON asc2.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE sdd.state_abb = 'NL' AND sdd.election_round = 'NL_2019' AND sdd.election_cycle = '1' GROUP BY asc2.future_vote_pref ORDER BY COUNT(*) DESC LIMIT 1;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList respondent count by age group (25-30) in Lakshadweep for LD_2019_AE round 4?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: This selects the age group (d.age) and counts the number of respondents (COUNT(*)) for the specified conditions.\n- FROM: The query joins three tables: demographic_section_capi (d), capi_fact (cf), and survey_desc_dimension_capi (sdd), based on the foreign key relationships.\n- WHERE: The conditions filter the results to include only respondents in the age group 25-30, in Lakshadweep (sdd.state_abb = 'LD'), and in the LD_2019_AE round 4 (sdd.election_cycle = 'LD_2019_AE' AND sdd.election_round = '4').\n- GROUP BY: The results are grouped by the age group (d.age) to count the number of respondents in each age group.\n- ORDER BY: The results are ordered by the age group (d.age) to present the data in a logical order.\n\nThe final SQL query is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '25-30' AND sdd.state_abb = 'LD' AND sdd.election_cycle = 'LD_2019_AE' AND sdd.election_round = '4' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '25-30' AND  sdd.state_abb = 'LD' AND sdd.election_cycle = 'LD_2019_AE' AND sdd.election_round = '4' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nGive respondent count by age group (60+) in Kerala for KL_2025_AE round 1.1?\n\nPlan:\nStep 4: Outline the Query Plan\n- SELECT: The purpose of this clause is to select the columns needed for the query, which are d.age and the count of respondents.\n- FROM: The FROM clause specifies the tables involved in the query, which are demographic_section_capi (d), capi_fact (cf), and survey_desc_dimension_capi (sdd).\n- WHERE: This clause applies the conditions for the query, including the age group (60+), the state (Kerala), the election cycle (KL_2025_AE), and the election round (1.1).\n- GROUP BY: The GROUP BY clause groups the results by the age column to provide the count of respondents for each age group.\n- ORDER BY: The ORDER BY clause sorts the results by the age column in ascending order.\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '60+' AND  sdd.state_abb = 'KL' AND sdd.election_cycle = 'KL_2025_AE' AND sdd.election_round = '1.1' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '60+' AND  sdd.state_abb = 'KL' AND sdd.election_cycle = 'KL_2025_AE' AND sdd.election_round = '1.1' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nGive respondent count by age group (60+) in Uttarakhand for UT_2024 round 2.2?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: The purpose of this clause is to select the `age` column from the `demographic_section_capi` table and count the number of respondents for each age group.\n- FROM: The `FROM` clause joins the `demographic_section_capi` table with `capi_fact` on `capi_fk`, and then joins the result with `survey_desc_dimension_capi` on `sd_dm_fk`. This is necessary to link the demographic information with the election data.\n- WHERE: The `WHERE` clause filters the results to include only respondents with an age of 60+ and from Uttarakhand (state abbreviation 'UT'), participating in the UT_2024 round 2.2.\n- GROUP BY: The `GROUP BY` clause groups the results by the `age` column to count the number of respondents for each age group.\n- ORDER BY: The `ORDER BY` clause sorts the results by the `age` column in ascending order.\n\nThe final SQL query is:\n```sql\nSELECT d.age, COUNT(*) \nFROM demographic_section_capi d \nJOIN capi_fact cf ON d.capi_fk = cf.capi_pk \nJOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk \nWHERE d.age = '60+' AND sdd.state_abb = 'UT' AND sdd.election_cycle = 'UT_2024' AND sdd.election_round = '2.2' \nGROUP BY d.age \nORDER BY d.age;\n```<|eot_id|>", "output": "SELECT d.age, COUNT(*) FROM demographic_section_capi d JOIN capi_fact cf ON d.capi_fk = cf.capi_pk JOIN survey_desc_dimension_capi sdd ON cf.sd_dm_fk = sdd.sd_dm_pk WHERE d.age = '60+' AND  sdd.state_abb = 'UT' AND sdd.election_cycle = 'UT_2024' AND sdd.election_round = '2.2' GROUP BY d.age ORDER BY d.age;"}
{"instruction": "Given the following schema:\nTables: caste_data(cons_name, cr_cons_id, cd_id, caste, sub_caste, caste_perc, category, cr_state)\n\nQuestion:\nWhich caste groups dominate in Maharashtra?\n\nPlan:\n**Step 4: Outline the Query Plan**\n- SELECT: The main query selects the caste and the sum of caste percentages for each caste group in Maharashtra.\n- FROM: The data is retrieved from the caste_data table.\n- WHERE: The query filters the data to only include rows where the cr_state is 'MH' (Maharashtra).\n- GROUP BY: The data is grouped by the caste column to calculate the sum of caste percentages for each group.\n- ORDER BY: The results are ordered in descending order by the sum of caste percentages to identify the top caste groups.\n- LIMIT: The top 5 caste groups are returned.\n\nThe final query plan is:\n```sql\nSELECT caste, SUM(caste_perc) \nFROM caste_data \nWHERE cr_state = 'MH' \nGROUP BY caste \nORDER BY SUM(caste_perc) DESC \nLIMIT 5;\n```<|eot_id|>", "output": "SELECT caste, SUM(caste_perc) FROM caste_data WHERE cr_state = 'MH' GROUP BY caste ORDER BY SUM(caste_perc) DESC LIMIT 5;"}