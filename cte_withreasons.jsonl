[
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nGive me the leading parties in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n**CTE 1: sd_dm_pks - Purpose: To filter the survey data by election cycle and round**\n- SELECT: `sd_dm_pk`, `ac_no`, `ac_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` is 'AP', `election_cycle` is 'AP_2024', and `election_round` is '1'.\n- FROM: `survey_desc_dimension_capi` and `ac_mappings` joined on `ac_mapping_fk = ac_mapping_pk`.\n- WHERE: Filter by state, election cycle, and round.\n\n**CTE 2: capi_fks - Purpose: To filter the survey data by document existence**\n- SELECT: All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` is true.\n- FROM: `capi_fact` and `sd_dm_pks` joined on `sd_dm_pk = sd_dm_pk`.\n- WHERE: Filter by document existence.\n\n**CTE 3: survey_samples - Purpose: To filter the survey data by normalization and join with other tables**\n- SELECT: All columns from `capi_fks` left joined with `ae_section_capi` and `normalisation_ac_table_capi` where `last_normalised_ae` is true.\n- FROM: `capi_fks` left joined with `ae_section_capi` on `capi_fk = capi_fk` and `normalisation_ac_table_capi` on `capi_fk = capi_fk`.\n- WHERE: Filter by normalization.\n\n**Main Query:**\n- SELECT: `ac_no`, `ac_name`, `future_vote_pref`, `sum(raw)` as total_samples, `100 * sum(vn) / sum(sum(vn)) over (partition by ac_no)` as vote_share from `survey_samples`.\n- FROM: `survey_samples`.\n- GROUP BY: `ac_no`, `ac_name`, `future_vote_pref`.\n- ORDER BY: `ac_no`, `vote_share` desc.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ae = true)\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                         as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nGive me the leading parties among first time voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- **CTE 1: sd_dm_pks - Purpose: To filter the survey data by election cycle and round.**\n  - **SELECT:** Retrieves `sd_dm_pk`, `ac_no`, and `ac_name` from `sddc` and `acm` tables.\n  - **FROM:** Joins `sddc` with `acm` on `ac_mapping_fk`.\n  - **WHERE:** Filters by `state_abb = 'AP'`, `election_cycle = 'AP_2024'`, and `election_round = '1'`.\n\n- **CTE 2: capi_fks - Purpose: To filter capi_fact data by document existence.**\n  - **SELECT:** Retrieves all columns from `capi_facts` and `sddc` tables.\n  - **FROM:** Joins `capi_facts` with `sddc` on `sd_dm_pk`.\n  - **WHERE:** Filters by `doc_exists = true`.\n\n- **CTE 3: survey_samples - Purpose: To filter survey data by last normalized AE and past vote preference.**\n  - **SELECT:** Retrieves all columns from `capi_fks` and joins with `ae` and `n` tables.\n  - **FROM:** Joins `capi_fks` with `ae` on `capi_pk` and `n` on `capi_pk`.\n  - **WHERE:** Filters by `last_normalised_ae = true` and `past_vote_pref = 'first time voter'`.\n\n- **Main Query:**\n  - **SELECT:** Retrieves `ac_no`, `ac_name`, `future_vote_pref`, and calculates `total_samples` and `vote_share`.\n  - **FROM:** Uses the `survey_samples` CTE.\n  - **GROUP BY:** Groups by `ac_no`, `ac_name`, and `future_vote_pref`.\n  - **ORDER BY:** Orders by `ac_no` and `vote_share` in descending order.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                        and lower(past_vote_pref) = 'first time voter')\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                         as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among first time women voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n**CTE 1: sd_dm_pks - Purpose: To filter the survey data by state and election cycle**\n- SELECT: `sd_dm_pk`, `ac_no`, `ac_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` is 'AP' and `election_cycle` is 'AP_2024' and `election_round` is '1'.\n- FROM: `survey_desc_dimension_capi` and `ac_mappings`.\n- WHERE: `state_abb` is 'AP', `election_cycle` is 'AP_2024', and `election_round` is '1'.\n\n**CTE 2: capi_fks - Purpose: To filter the survey data by document existence**\n- SELECT: All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` is true.\n- FROM: `capi_fact` and `sd_dm_pks`.\n- WHERE: `doc_exists` is true.\n\n**CTE 3: survey_samples - Purpose: To filter the survey data by first-time women voters**\n- SELECT: All columns from `capi_fks`, `ae_section_capi`, `normalisation_ac_table_capi`, and `demographic_section_capi` where `last_normalised_ae` is true, `past_vote_pref` is 'first time voter', and `gender` is 'female'.\n- FROM: `capi_fks`, `ae_section_capi`, `normalisation_ac_table_capi`, and `demographic_section_capi`.\n- WHERE: `last_normalised_ae` is true, `past_vote_pref` is 'first time voter', and `gender` is 'female'.\n\n**Main Query: Purpose - To calculate the VN score and group by assembly constituency**\n- SELECT: `ac_no`, `ac_name`, `future_vote_pref`, `sum(raw)` as `total_samples`, and `100* sum(vn) / sum(sum(vn)) over (partition by ac_no)` as `vote_share`.\n- FROM: `survey_samples`.\n- GROUP BY: `ac_no`, `ac_name`, and `future_vote_pref`.\n- ORDER BY: `ac_no` and `vote_share` in descending order.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                        and lower(past_vote_pref) = 'first time voter'\n                        and lower(gender) = 'female')\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                         as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among all women voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nWe will use three CTEs to break down the query into smaller parts:\n\n**CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by state and election cycle**\n```sql\nwith sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1')\n```\n\n**CTE 2: `capi_fks` - Purpose: To filter the survey data by document existence**\n```sql\ncapi_fks as (select *\n             from capi_fact\n                      inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n             where doc_exists = true)\n```\n\n**CTE 3: `survey_samples` - Purpose: To filter the survey data by gender and calculate VN score**\n```sql\nsurvey_samples as (select *\n                  from capi_fks\n                           LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                           LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                           LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                  where last_normalised_ae = true\n                    and lower(gender) = 'female')\n```\n\n**Final Query:**\n```sql\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;\n```",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                 LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                          and lower(gender) = 'female')\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among all SC voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nThe query plan involves four CTEs:\n\n- **CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by state and election cycle**\n  - SELECT: `sd_dm_pk`, `ac_no`, `ac_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` = 'AP' and `election_cycle` = 'AP_2024' and `election_round` = '1'\n  - FROM: `survey_desc_dimension_capi` and `ac_mappings`\n  - WHERE: `state_abb` = 'AP', `election_cycle` = 'AP_2024', `election_round` = '1'\n\n- **CTE 2: `capi_fks` - Purpose: To filter the survey data by document existence**\n  - SELECT: All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` = true\n  - FROM: `capi_fact` and `sd_dm_pks`\n  - WHERE: `doc_exists` = true\n\n- **CTE 3: `survey_samples` - Purpose: To filter the survey data by caste category and join with other tables**\n  - SELECT: All columns from `capi_fks`, `ae_section_capi`, `normalisation_ac_table_capi`, and `demographic_section_capi` where `last_normalised_ae` = true and `lower(caste_category)` ='sc'\n  - FROM: `capi_fks`, `ae_section_capi`, `normalisation_ac_table_capi`, and `demographic_section_capi`\n  - WHERE: `last_normalised_ae` = true, `lower(caste_category)` ='sc'\n\n- **Main Query: To calculate the leading parties among all SC voters in each AC**\n  - SELECT: `ac_no`, `ac_name`, `future_vote_pref`, `sum(raw)` as `total_samples`, `100 * sum(vn) / sum(sum(vn)) over (partition by ac_no)` as `vote_share`\n  - FROM: `survey_samples`\n  - GROUP BY: `ac_no`, `ac_name`, `future_vote_pref`\n  - ORDER BY: `ac_no`, `vote_share` desc",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                 LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                          and lower(caste_category) = 'sc')\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among all SC and ST voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- **CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by election cycle and round for Andhra Pradesh.**\n  - `SELECT sd_dm_pk, ac_no, ac_name FROM survey_desc_dimension_capi sddc INNER JOIN ac_mappings acm ON sddc.ac_mapping_fk = acm.ac_mapping_pk WHERE sddc.state_abb = 'AP' AND election_cycle = 'AP_2024' AND election_round = '1'`\n- **CTE 2: `capi_fks` - Purpose: To filter the survey data by document existence.**\n  - `SELECT * FROM capi_fact INNER JOIN sd_dm_pks ON sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk WHERE doc_exists = true`\n- **CTE 3: `survey_samples` - Purpose: To filter the survey data by caste category and normalize the data.**\n  - `SELECT * FROM capi_fks LEFT JOIN ae_section_capi ae ON ae.capi_fk = capi_pk LEFT JOIN normalisation_ac_table_capi n ON n.capi_fk = capi_pk LEFT JOIN demographic_section_capi dsc ON dsc.capi_fk = capi_pk WHERE last_normalised_ae = true AND lower(caste_category) IN ('sc','st')`\n- **Main Query:**\n  - `SELECT ac_no, ac_name, future_vote_pref, SUM(raw) AS total_samples, 100 * SUM(vn) / SUM(SUM(vn)) OVER (PARTITION BY ac_no) AS vote_share FROM survey_samples GROUP BY ac_no, ac_name, future_vote_pref ORDER BY ac_no, vote_share DESC;`",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                 LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                          and lower(caste_category) in ('sc', 'st'))\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among all OBC voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nWe will use four CTEs to break down the query into manageable parts:\n\n**CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by election cycle and round for the state of Andhra Pradesh.**\n```sql\nWITH sd_dm_pks AS (\n  SELECT sd_dm_pk, ac_no, ac_name\n  FROM survey_desc_dimension_capi sddc\n  INNER JOIN ac_mappings acm ON sddc.ac_mapping_fk = acm.ac_mapping_pk\n  WHERE sddc.state_abb = 'AP'\n    AND election_cycle = 'AP_2024'\n    AND election_round = '1'\n)\n```\n\n**CTE 2: `capi_fks` - Purpose: To filter the capi_fact table by the filtered survey data.**\n```sql\nWITH capi_fks AS (\n  SELECT *\n  FROM capi_fact\n  INNER JOIN sd_dm_pks ON sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n  WHERE doc_exists = true\n)\n```\n\n**CTE 3: `survey_samples` - Purpose: To filter the survey data by OBC voters and calculate the VN score.**\n```sql\nWITH survey_samples AS (\n  SELECT *\n  FROM capi_fks\n  LEFT JOIN ae_section_capi ae ON ae.capi_fk = capi_pk\n  LEFT JOIN normalisation_ac_table_capi n ON n.capi_fk = capi_pk\n  LEFT JOIN demographic_section_capi dsc ON dsc.capi_fk = capi_pk\n  WHERE last_normalised_ae = true AND lower(caste_category) = 'obc'\n)\n```\n\n**CTE 4: Final Query - Purpose: To calculate the leading parties among OBC voters in each AC.**\n```sql\nSELECT ac_no,\n       ac_name,\n       future_vote_pref,\n       SUM(raw) AS total_samples,\n       100 * SUM(vn) / SUM(SUM(vn)) OVER (PARTITION BY ac_no) AS vote_share\nFROM survey_samples\nGROUP BY ac_no, ac_name, future_vote_pref\nORDER BY ac_no, vote_share DESC;\n```",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                 LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                          and lower(caste_category) = 'obc')\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone), demographic_section_capi(capi_fk, sub_caste, gender, age, caste_category, caste_original, sc_sub_caste, obc_sub_caste, gen_sub_caste, st_sub_caste, job_type, religion, mobile, highest_qualification)\n\nQuestion:\nList out the leading parties among all GEN voters or general voters in each AC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per assembly constituency.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- **CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by election cycle and round.**\n  - `SELECT sd_dm_pk, ac_no, ac_name FROM survey_desc_dimension_capi sddc INNER JOIN ac_mappings acm ON sddc.ac_mapping_fk = acm.ac_mapping_pk WHERE sddc.state_abb = 'AP' AND election_cycle = 'AP_2024' AND election_round = '1'`\n- **CTE 2: `capi_fks` - Purpose: To filter the capi_fact table by doc_exists.**\n  - `SELECT * FROM capi_fact INNER JOIN sd_dm_pks ON sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk WHERE doc_exists = true`\n- **CTE 3: `survey_samples` - Purpose: To filter the capi_fks table by caste category and last_normalised_ae.**\n  - `SELECT * FROM capi_fks LEFT JOIN ae_section_capi ae ON ae.capi_fk = capi_pk LEFT JOIN normalisation_ac_table_capi n ON n.capi_fk = capi_pk LEFT JOIN demographic_section_capi dsc ON dsc.capi_fk = capi_pk WHERE last_normalised_ae = true AND lower(caste_category) IN ('gen', 'general')`\n- **Main Query:**\n  - `SELECT ac_no, ac_name, future_vote_pref, SUM(raw) AS total_samples, 100 * SUM(vn) / SUM(SUM(vn)) OVER (PARTITION BY ac_no) AS vote_share FROM survey_samples GROUP BY ac_no, ac_name, future_vote_pref ORDER BY ac_no, vote_share DESC;`",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                                 LEFT JOIN demographic_section_capi dsc on dsc.capi_fk = capi_pk\n                        where last_normalised_ae = true\n                          and lower(caste_category) in ('gen', 'general'))\nselect ac_no,\n       ac_name,\n       future_vote_pref,\n       sum(raw)                                               as total_samples,\n       100 * sum(vn) / sum(sum(vn)) over (partition by ac_no) as vote_share\nfrom survey_samples\ngroup by ac_no, ac_name, future_vote_pref\norder by ac_no, vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nGive me the seat calls for all assembly seats in the state of andhra pradesh for survey round 1 of the election cycle AP_2024 considering the vn score.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nCTE 1: `sd_dm_pks` - Purpose: To filter the survey data by state (Andhra Pradesh), election cycle (AP_2024), and survey round (1).\n- SELECT: Retrieves `sd_dm_pk`, `ac_no`, and `ac_name` from `survey_desc_dimension_capi` and `ac_mappings` based on the filters.\n- FROM: Joins `survey_desc_dimension_capi` with `ac_mappings` on `ac_mapping_fk` and `ac_mapping_pk`.\n- WHERE: Applies the filters for state, election cycle, and survey round.\n\nCTE 2: `capi_fks` - Purpose: To retrieve the filtered survey data with the corresponding `capi_pk` values.\n- SELECT: Retrieves all columns from `capi_fact` joined with `sd_dm_pks` on `sd_dm_pk`.\n- FROM: Joins `capi_fact` with `sd_dm_pks` on `sd_dm_pk`.\n- WHERE: Filters the data to include only rows where `doc_exists` is true.\n\nCTE 3: `survey_samples` - Purpose: To retrieve the survey data with the corresponding `capi_pk` values and join with `ae_section_capi` and `normalisation_ac_table_capi`.\n- SELECT: Retrieves all columns from `capi_fks` joined with `ae_section_capi` and `normalisation_ac_table_capi` on `capi_fk`.\n- FROM: Joins `capi_fks` with `ae_section_capi` and `normalisation_ac_table_capi` on `capi_fk`.\n- WHERE: Filters the data to include only rows where `last_normalised_ae` is true.\n\nCTE 4: `ac_wise_party_pref` - Purpose: To calculate the VN score and rank for each assembly seat.\n- SELECT: Retrieves `ac_no`, `ac_name`, `future_vote_pref`, `total_samples`, `vote_share`, and `rank` from `survey_samples` grouped by `ac_no`, `ac_name`, and `future_vote_pref`.\n- FROM: Uses the `survey_samples` CTE.\n- GROUP BY: Groups the data by `ac_no`, `ac_name`, and `future_vote_pref`.\n- WINDOW FUNCTION: Applies the `sum` and `row_number` functions to calculate the VN score and rank.\n\nFINAL QUERY: Retrieves the assembly seats with the highest VN score for each assembly seat.\n- SELECT: Retrieves `ac_no`, `ac_name`, `future_vote_pref` as `winner`, and `vote_share` from `ac_wise_party_pref` where `rank` is 1.\n- FROM: Uses the `ac_wise_party_pref` CTE.\n- WHERE: Filters the data to include only rows where `rank` is 1.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, ac_no, ac_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ae = true),\n     ac_wise_party_pref as (select ac_no,\n                                   ac_name,\n                                   future_vote_pref,\n                                   sum(raw)                                                     as total_samples,\n                                   100 * sum(vn) / sum(sum(vn)) over (partition by ac_no)       as vote_share,\n                                   row_number() over (partition by ac_no order by sum(vn) desc) as rank\n                            from survey_samples\n                            group by ac_no, ac_name, future_vote_pref)\nselect ac_no, ac_name, future_vote_pref as winner, vote_share\nfrom ac_wise_party_pref\nwhere rank = 1;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nList out the leading parties in each PC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024 for PC number 1.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\n- **CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by state, election cycle, and election round.**\n  - **SELECT:** `sd_dm_pk`, `pc_no`, `pc_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` = 'AP', `election_cycle` = 'AP_2024', and `election_round` = '1'.\n  - **FROM:** `survey_desc_dimension_capi` and `ac_mappings` joined on `ac_mapping_fk`.\n- **CTE 2: `capi_fks` - Purpose: To filter the survey data by document existence.**\n  - **SELECT:** All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` = true.\n  - **FROM:** `capi_fact` and `sd_dm_pks` joined on `sd_dm_fk`.\n- **CTE 3: `survey_samples` - Purpose: To filter the survey data by last normalized AE and join with other tables.**\n  - **SELECT:** All columns from `capi_fks` left joined with `ae_section_capi` and `normalisation_ac_table_capi` where `last_normalised_ae` = true.\n  - **FROM:** `capi_fks` left joined with `ae_section_capi` on `capi_fk` and `normalisation_ac_table_capi` on `capi_fk`.\n- **MAIN QUERY:**\n  - **SELECT:** `pc_no`, `pc_name`, `future_vote_pref`, `sum(raw)` as `total_samples`, and `100 * sum(vn) / sum(sum(vn)) over (partition by pc_no)` as `vote_share` from `survey_samples` where `pc_no` = 1.\n  - **FROM:** `survey_samples`.\n  - **GROUP BY:** `pc_no`, `pc_name`, `future_vote_pref`.\n  - **ORDER BY:** `vote_share` desc.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, pc_no, pc_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ae = true)\nselect pc_no,\n       pc_name,\n       future_vote_pref,\n       sum(raw) as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by pc_no) as vote_share\nfrom survey_samples\nwhere pc_no = 1\ngroup by pc_no, pc_name, future_vote_pref\norder by vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: ae_section_capi(capi_fk, cand_pref_ques, cm_preference, cm_work_satisfaction, past_vote_pref, future_vote_pref, mla_work_satisfaction, ac_issues, ac_winner_preference, state_winner_preference, state_schemes_benefitted), normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nList out the leading parties in each PC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024, only for the PC with the name Nagpur North.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nWe will use CTEs to break down the query into smaller, more manageable pieces.\n\n**CTE 1: `sd_dm_pks` - Purpose: To filter the survey data by state, election cycle, and election round.**\n- SELECT: `sd_dm_pk`, `pc_no`, `pc_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` is 'AP', `election_cycle` is 'AP_2024', and `election_round` is '1'.\n- FROM: `survey_desc_dimension_capi` and `ac_mappings` joined on `ac_mapping_fk`.\n- WHERE: Filter by state, election cycle, and election round.\n\n**CTE 2: `capi_fks` - Purpose: To filter the survey data by document existence.**\n- SELECT: All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` is true.\n- FROM: `capi_fact` and `sd_dm_pks` joined on `sd_dm_pk`.\n- WHERE: Filter by document existence.\n\n**CTE 3: `survey_samples` - Purpose: To filter the survey data by normalization.**\n- SELECT: All columns from `capi_fks` and `ae_section_capi` and `normalisation_ac_table_capi` where `last_normalised_ae` is true.\n- FROM: `capi_fks` left joined with `ae_section_capi` and `normalisation_ac_table_capi` on `capi_pk`.\n- WHERE: Filter by normalization.\n\n**Main Query:**\n- SELECT: `pc_no`, `pc_name`, `future_vote_pref`, `sum(raw)` as `total_samples`, and `100* sum(vn) / sum(sum(vn)) over (partition by pc_no)` as `vote_share` from `survey_samples` where `pc_name` is 'Nagpur North'.\n- FROM: `survey_samples`.\n- WHERE: Filter by PC name.\n- GROUP BY: `pc_no`, `pc_name`, and `future_vote_pref`.\n- ORDER BY: `vote_share` in descending order.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, pc_no, pc_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ae_section_capi ae on ae.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ae = true)\nselect pc_no,\n       pc_name,\n       future_vote_pref,\n       sum(raw) as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by pc_no) as vote_share\nfrom survey_samples\nwhere pc_name = 'Nagpur North'\ngroup by pc_no, pc_name, future_vote_pref\norder by vote_share desc;"
    },
    {
        "instruction": "Given the following schema:\nTables: normalisation_ac_table_capi(capi_fk, raw, vn, vn_final, vn_ae, vn_agc, vn_agc_ae, vn_gc, vn_gc_ae, vn_c, vn_c_ae, vn_ge, vn_ae_ge, vn_raw_ae, vn_average, vn_average_ge, last_normalised_ae, last_normalised_ge, caste, vn_raw_ge), survey_desc_dimension_capi(sd_dm_pk, state_abb, election_cycle, election_round, level, cons_no, status, reporting_round, ac_mapping_fk, audit_status, normalisation, recalibration_status), capi_fact(capi_pk, mongo_doc_id, respondent_unique_id, sd_dm_fk, doc_exists), ge_section_capi(capi_fk, cand_pref_ques_ge, pm_pref, past_vote_pref_ge, future_vote_pref_ge, pm_work_satisfaction), ac_mappings(ac_mapping_pk, state_abb, ac_no, ac_name, pc_no, pc_name, district, zone)\n\nQuestion:\nGive me the leading parties in each PC for the survey round 1 for the state of andhra pradesh as per the vn score for election cycle AP_2024. The results should be given as per parliamentary constituency or PC.\n\nPlan:\n**Step 4: Outline the Query Plan**\n\nThe query plan consists of four main components:\n\n1. **CTE 1: sd_dm_pks - Purpose: To filter the survey data by state, election cycle, and election round.**\n   - SELECT: `sd_dm_pk`, `pc_no`, `pc_name` from `survey_desc_dimension_capi` and `ac_mappings` where `state_abb` = 'AP', `election_cycle` = 'AP_2024', and `election_round` = '1'.\n   - FROM: `survey_desc_dimension_capi` and `ac_mappings` joined on `ac_mapping_fk` and `ac_mapping_pk`.\n2. **CTE 2: capi_fks - Purpose: To filter the capi_fact data by doc_exists = true.**\n   - SELECT: All columns from `capi_fact` and `sd_dm_pks` where `doc_exists` = true.\n   - FROM: `capi_fact` and `sd_dm_pks` joined on `sd_dm_fk` and `sd_dm_pk`.\n3. **CTE 3: survey_samples - Purpose: To filter the survey data by last_normalised_ge = true.**\n   - SELECT: All columns from `capi_fks`, `ge_section_capi`, and `normalisation_ac_table_capi` where `last_normalised_ge` = true.\n   - FROM: `capi_fks`, `ge_section_capi`, and `normalisation_ac_table_capi` joined on `capi_fk` and `capi_pk`.\n4. **Main Query - Purpose: To calculate the leading parties in each PC.**\n   - SELECT: `pc_no`, `pc_name`, `future_vote_pref_ge`, `total_samples`, and `vote_share` from `survey_samples`.\n   - FROM: `survey_samples` grouped by `pc_no`, `pc_name`, and `future_vote_pref_ge`.\n   - WHERE: No conditions.\n   - ORDER BY: `pc_no` and `vote_share` in descending order.",
        "output": "with sd_dm_pks as (SELECT sd_dm_pk, pc_no, pc_name\n                   from survey_desc_dimension_capi sddc\n                            inner join ac_mappings acm on sddc.ac_mapping_fk = acm.ac_mapping_pk\n                   where sddc.state_abb = 'AP'\n                     and election_cycle = 'AP_2024'\n                     and election_round = '1'),\n     capi_fks as (select *\n                  from capi_fact\n                           inner join sd_dm_pks on sd_dm_pks.sd_dm_pk = capi_fact.sd_dm_fk\n                  where doc_exists = true),\n     survey_samples as (select *\n                        from capi_fks\n                                 LEFT JOIN ge_section_capi ge on ge.capi_fk = capi_pk\n                                 LEFT JOIN normalisation_ac_table_capi n on n.capi_fk = capi_pk\n                        where last_normalised_ge = true)\nselect pc_no,\n       pc_name,\n       future_vote_pref_ge,\n       sum(raw)                                         as total_samples,\n       100* sum(vn) / sum(sum(vn)) over (partition by pc_no) as vote_share\nfrom survey_samples\ngroup by pc_no, pc_name, future_vote_pref_ge\norder by pc_no, vote_share desc;"
    }
]